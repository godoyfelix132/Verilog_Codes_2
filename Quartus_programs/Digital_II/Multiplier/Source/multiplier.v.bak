module multiplier
#(
	parameter N_BITS = 4
)
(
	input [N_BITS-1 : 0]x,
	input [N_BITS-1 : 0]y,
	output [2*N_BITS-1 : 0]s 
);

wire [N_BITS-1 : 0]c_wire;
wire [N_BITS : 0]s1_wire;

adders_cell
adders_cell_1
(
	.x(x),
	.b(           {  '0', x[N_BITS-1 : 1] & {N_BITS-1{y[0]}}    }    ),//
	.y(y[1]),
	.s(s1_wire)
); 

genvar i;
generate
	genvar [N_BITS : 0] s_tem_wire = s1_wire;
	for(i=1; i< N_BITS; i = i + 1)begin: gen_adders_cell
		adders_cell
		adders_cell_i
		(
			.x(x),
			.b(s1_tem_wire[N_BITS : 1]),
			.y(y[i+1]),
			.s(s1_tem_wire)//
		); 
		assign s[i+1] = s1_tem_wire[0];
	end
endgenerate

assign s[0] = x[0] & y[0];
assign s[1] = s1_wire[0];

endmodule
